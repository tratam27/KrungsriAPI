// <auto-generated />
using System;
using Krungsri.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Krungsri.DataAccess.Migrations
{
    [DbContext(typeof(KrungsriContext))]
    [Migration("20190901171932_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Krungsri.DataAccess.Models.AdminAccess", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookBank");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserName");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.AdminTokenAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminId");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("RefreshToken");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .IsUnique();

                    b.ToTable("AdminToken");
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.AdminTransactionAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminId");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("MoneyAmount");

                    b.Property<string>("Ref");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminTransaction");
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.MerchantAccess", b =>
                {
                    b.Property<int>("MerchantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookBank");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserName");

                    b.HasKey("MerchantId");

                    b.ToTable("Merchant");
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.MerchantTokenAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("MerchantId");

                    b.Property<string>("RefreshToken");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId")
                        .IsUnique();

                    b.ToTable("MerchantToken");
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.MerchantTransactionAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("MerchantId");

                    b.Property<decimal>("MoneyAmount");

                    b.Property<string>("Ref");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("UserId");

                    b.ToTable("MerchantTransaction");
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.OtpAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email");

                    b.Property<string>("Otp");

                    b.Property<string>("Ref");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OTP");
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.TokenAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("RefreshToken");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Token");
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.UserAccess", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance");

                    b.Property<DateTime>("Birthdate");

                    b.Property<string>("BookBank");

                    b.Property<DateTime>("CreateDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Salt");

                    b.Property<DateTime>("UpdateDateTime")
                        .ValueGeneratedOnUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.AdminTokenAccess", b =>
                {
                    b.HasOne("Krungsri.DataAccess.Models.AdminAccess", "Admin")
                        .WithOne("AdminToken")
                        .HasForeignKey("Krungsri.DataAccess.Models.AdminTokenAccess", "AdminId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.AdminTransactionAccess", b =>
                {
                    b.HasOne("Krungsri.DataAccess.Models.AdminAccess", "Admin")
                        .WithMany("AdminTransactions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.MerchantTokenAccess", b =>
                {
                    b.HasOne("Krungsri.DataAccess.Models.MerchantAccess", "Merchant")
                        .WithOne("MerchantToken")
                        .HasForeignKey("Krungsri.DataAccess.Models.MerchantTokenAccess", "MerchantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.MerchantTransactionAccess", b =>
                {
                    b.HasOne("Krungsri.DataAccess.Models.MerchantAccess", "Merchant")
                        .WithMany("MerchantTransactions")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Krungsri.DataAccess.Models.UserAccess", "User")
                        .WithMany("MerchantTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.OtpAccess", b =>
                {
                    b.HasOne("Krungsri.DataAccess.Models.UserAccess", "User")
                        .WithMany("Otps")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Krungsri.DataAccess.Models.TokenAccess", b =>
                {
                    b.HasOne("Krungsri.DataAccess.Models.UserAccess", "User")
                        .WithOne("Token")
                        .HasForeignKey("Krungsri.DataAccess.Models.TokenAccess", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
